// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQSIngesterClient is the client API for SQSIngester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQSIngesterClient interface {
	// StartBlockProcess starts block processing by sending block height and taker fee updates
	// for that block.
	StartBlockProcess(ctx context.Context, in *StartBlockProcessRequest, opts ...grpc.CallOption) (*StartBlockProcessReply, error)
	// ProcessChainPools processes the Osmosis liquidity pools in a streaming fashion.
	ProcessChainPools(ctx context.Context, opts ...grpc.CallOption) (SQSIngester_ProcessChainPoolsClient, error)
	// EndBlockProcess is called when the block processing is finished.
	// It sorts the pools for router for use intra-block.
	// It commits all processed state into internal SQS repositories, including:
	// - pools for display (pools repository)
	// - sorted pools for use in the router (router repository)
	// - taker fees (router repository)
	// - block height (router chain info repository)
	EndBlockProcess(ctx context.Context, in *EndBlockProcessRequest, opts ...grpc.CallOption) (*EndBlockProcessReply, error)
}

type sQSIngesterClient struct {
	cc grpc.ClientConnInterface
}

func NewSQSIngesterClient(cc grpc.ClientConnInterface) SQSIngesterClient {
	return &sQSIngesterClient{cc}
}

func (c *sQSIngesterClient) StartBlockProcess(ctx context.Context, in *StartBlockProcessRequest, opts ...grpc.CallOption) (*StartBlockProcessReply, error) {
	out := new(StartBlockProcessReply)
	err := c.cc.Invoke(ctx, "/sqs.ingest.v1beta1.SQSIngester/StartBlockProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQSIngesterClient) ProcessChainPools(ctx context.Context, opts ...grpc.CallOption) (SQSIngester_ProcessChainPoolsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SQSIngester_ServiceDesc.Streams[0], "/sqs.ingest.v1beta1.SQSIngester/ProcessChainPools", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQSIngesterProcessChainPoolsClient{stream}
	return x, nil
}

type SQSIngester_ProcessChainPoolsClient interface {
	Send(*ChainPoolsDataChunk) error
	CloseAndRecv() (*ProcessChainPoolsReply, error)
	grpc.ClientStream
}

type sQSIngesterProcessChainPoolsClient struct {
	grpc.ClientStream
}

func (x *sQSIngesterProcessChainPoolsClient) Send(m *ChainPoolsDataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sQSIngesterProcessChainPoolsClient) CloseAndRecv() (*ProcessChainPoolsReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProcessChainPoolsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sQSIngesterClient) EndBlockProcess(ctx context.Context, in *EndBlockProcessRequest, opts ...grpc.CallOption) (*EndBlockProcessReply, error) {
	out := new(EndBlockProcessReply)
	err := c.cc.Invoke(ctx, "/sqs.ingest.v1beta1.SQSIngester/EndBlockProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQSIngesterServer is the server API for SQSIngester service.
// All implementations must embed UnimplementedSQSIngesterServer
// for forward compatibility
type SQSIngesterServer interface {
	// StartBlockProcess starts block processing by sending block height and taker fee updates
	// for that block.
	StartBlockProcess(context.Context, *StartBlockProcessRequest) (*StartBlockProcessReply, error)
	// ProcessChainPools processes the Osmosis liquidity pools in a streaming fashion.
	ProcessChainPools(SQSIngester_ProcessChainPoolsServer) error
	// EndBlockProcess is called when the block processing is finished.
	// It sorts the pools for router for use intra-block.
	// It commits all processed state into internal SQS repositories, including:
	// - pools for display (pools repository)
	// - sorted pools for use in the router (router repository)
	// - taker fees (router repository)
	// - block height (router chain info repository)
	EndBlockProcess(context.Context, *EndBlockProcessRequest) (*EndBlockProcessReply, error)
	mustEmbedUnimplementedSQSIngesterServer()
}

// UnimplementedSQSIngesterServer must be embedded to have forward compatible implementations.
type UnimplementedSQSIngesterServer struct {
}

func (UnimplementedSQSIngesterServer) StartBlockProcess(context.Context, *StartBlockProcessRequest) (*StartBlockProcessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBlockProcess not implemented")
}
func (UnimplementedSQSIngesterServer) ProcessChainPools(SQSIngester_ProcessChainPoolsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessChainPools not implemented")
}
func (UnimplementedSQSIngesterServer) EndBlockProcess(context.Context, *EndBlockProcessRequest) (*EndBlockProcessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBlockProcess not implemented")
}
func (UnimplementedSQSIngesterServer) mustEmbedUnimplementedSQSIngesterServer() {}

// UnsafeSQSIngesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQSIngesterServer will
// result in compilation errors.
type UnsafeSQSIngesterServer interface {
	mustEmbedUnimplementedSQSIngesterServer()
}

func RegisterSQSIngesterServer(s grpc.ServiceRegistrar, srv SQSIngesterServer) {
	s.RegisterService(&SQSIngester_ServiceDesc, srv)
}

func _SQSIngester_StartBlockProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBlockProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSIngesterServer).StartBlockProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.ingest.v1beta1.SQSIngester/StartBlockProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSIngesterServer).StartBlockProcess(ctx, req.(*StartBlockProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQSIngester_ProcessChainPools_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SQSIngesterServer).ProcessChainPools(&sQSIngesterProcessChainPoolsServer{stream})
}

type SQSIngester_ProcessChainPoolsServer interface {
	SendAndClose(*ProcessChainPoolsReply) error
	Recv() (*ChainPoolsDataChunk, error)
	grpc.ServerStream
}

type sQSIngesterProcessChainPoolsServer struct {
	grpc.ServerStream
}

func (x *sQSIngesterProcessChainPoolsServer) SendAndClose(m *ProcessChainPoolsReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sQSIngesterProcessChainPoolsServer) Recv() (*ChainPoolsDataChunk, error) {
	m := new(ChainPoolsDataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SQSIngester_EndBlockProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndBlockProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSIngesterServer).EndBlockProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.ingest.v1beta1.SQSIngester/EndBlockProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSIngesterServer).EndBlockProcess(ctx, req.(*EndBlockProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQSIngester_ServiceDesc is the grpc.ServiceDesc for SQSIngester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQSIngester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sqs.ingest.v1beta1.SQSIngester",
	HandlerType: (*SQSIngesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBlockProcess",
			Handler:    _SQSIngester_StartBlockProcess_Handler,
		},
		{
			MethodName: "EndBlockProcess",
			Handler:    _SQSIngester_EndBlockProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessChainPools",
			Handler:       _SQSIngester_ProcessChainPools_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ingest.proto",
}
