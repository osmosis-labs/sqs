// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQSIngesterClient is the client API for SQSIngester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQSIngesterClient interface {
	// ProcessBlock processes a block from the Osmosis node.
	ProcessBlock(ctx context.Context, in *ProcessBlockRequest, opts ...grpc.CallOption) (*ProcessBlockReply, error)
}

type sQSIngesterClient struct {
	cc grpc.ClientConnInterface
}

func NewSQSIngesterClient(cc grpc.ClientConnInterface) SQSIngesterClient {
	return &sQSIngesterClient{cc}
}

func (c *sQSIngesterClient) ProcessBlock(ctx context.Context, in *ProcessBlockRequest, opts ...grpc.CallOption) (*ProcessBlockReply, error) {
	out := new(ProcessBlockReply)
	err := c.cc.Invoke(ctx, "/sqs.ingest.v1beta1.SQSIngester/ProcessBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQSIngesterServer is the server API for SQSIngester service.
// All implementations must embed UnimplementedSQSIngesterServer
// for forward compatibility
type SQSIngesterServer interface {
	// ProcessBlock processes a block from the Osmosis node.
	ProcessBlock(context.Context, *ProcessBlockRequest) (*ProcessBlockReply, error)
	mustEmbedUnimplementedSQSIngesterServer()
}

// UnimplementedSQSIngesterServer must be embedded to have forward compatible implementations.
type UnimplementedSQSIngesterServer struct {
}

func (UnimplementedSQSIngesterServer) ProcessBlock(context.Context, *ProcessBlockRequest) (*ProcessBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBlock not implemented")
}
func (UnimplementedSQSIngesterServer) mustEmbedUnimplementedSQSIngesterServer() {}

// UnsafeSQSIngesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQSIngesterServer will
// result in compilation errors.
type UnsafeSQSIngesterServer interface {
	mustEmbedUnimplementedSQSIngesterServer()
}

func RegisterSQSIngesterServer(s grpc.ServiceRegistrar, srv SQSIngesterServer) {
	s.RegisterService(&SQSIngester_ServiceDesc, srv)
}

func _SQSIngester_ProcessBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSIngesterServer).ProcessBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.ingest.v1beta1.SQSIngester/ProcessBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSIngesterServer).ProcessBlock(ctx, req.(*ProcessBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQSIngester_ServiceDesc is the grpc.ServiceDesc for SQSIngester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQSIngester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sqs.ingest.v1beta1.SQSIngester",
	HandlerType: (*SQSIngesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessBlock",
			Handler:    _SQSIngester_ProcessBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingest.proto",
}
